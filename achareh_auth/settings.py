"""
Django settings for achareh_auth project.
Generated by 'django-admin startproject' using Django 4.1.7.
"""
import os
from datetime import timedelta
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = os.getenv('SECRET_KEY', 'secret')
DEBUG = bool(int(os.getenv('DEBUG', 1)))
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    # defaults
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # libraries
    'rest_framework',
    'import_export',
    "django_redis",

    # applications
    'applications.user.apps.UserConfig',
    'applications.common.apps.CommonConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # custom
    'applications.user.middlewares.IPMiddleware',
]

ROOT_URLCONF = 'achareh_auth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],

            'libraries': {
                'staticfiles': 'django.templatetags.static',
            }
        },
    },
]

WSGI_APPLICATION = 'achareh_auth.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'user.User'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv('CACHES_REDIS_HOST', default="redis://127.0.0.1:6379"),
        "TIMEOUT": int(os.getenv('REDIS_TIMEOUT', default='3600')),
        "KEY_PREFIX": os.getenv('REDIS_KEY_PREFIX', default=""),
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(os.environ.get('ACCESS_TOKEN_LIFETIME', 10))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(os.environ.get('REFRESH_TOKEN_LIFETIME', 1))),
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=int(os.environ.get('SLIDING_TOKEN_LIFETIME', 5))),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=int(os.environ.get('SLIDING_TOKEN_REFRESH_LIFETIME', 1))),
}

TEMPLATE_LOADERS = (
    ('django.template.loaders.cached.Loader', (
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
    )),
)

# Session
SESSION_EXPIRE_AT_BROWSER_CLOSE = bool(int(os.environ.get('SESSION_EXPIRE_AT_BROWSER_CLOSE', True)))
SESSION_COOKIE_AGE = int(os.environ.get('SESSION_COOKIE_AGE', 60 * 90 * 8))  # 90 minutes
SESSION_SAVE_EVERY_REQUEST = bool(int(os.environ.get('SESSION_SAVE_EVERY_REQUEST', True)))

# Variables
VERSION: str = os.environ.get('VERSION', '1.0.0')
PROJECT_NAME: str = os.environ.get('PROJECT_NAME', 'Achareh')
MAX_ATTEMPT_NUMBER: int = int(os.environ.get('MAX_ATTEMPT_NUMBER', 3))
ATTEMPT_RESET_TIME: int = int(os.environ.get('ATTEMPT_RESET_TIME', 60 * 60))
OPT_EXPIRE_TIME: int = int(os.environ.get('OPT_EXPIRE_TIME', 100))
